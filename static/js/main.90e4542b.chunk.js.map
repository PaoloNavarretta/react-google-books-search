{"version":3,"sources":["components/Header.js","components/SearchArea.js","components/BookCard.js","components/BookList.js","components/Books.js","App.js","serviceWorker.js","index.js"],"names":["Header","SearchArea","props","className","onSubmit","searchBook","onChange","handleSearch","type","placeholder","defaultValue","handleSort","disabled","value","BookCard","title","author","published","substring","BookList","books","map","book","i","key","volumeInfo","authors","publishedDate","Books","e","preventDefault","request","get","query","q","state","searchField","then","data","cleanData","setState","event","target","sort","body","items","hasOwnProperty","thumbnail","sortedBooks","this","a","b","parseInt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90e4542b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>Google API Book Search</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst SearchArea = props => {\n  return (\n    <div className=\"search-area\">\n      <form onSubmit={props.searchBook} className=\"form-search\">\n        <input\n          className=\"search-input\"\n          onChange={props.handleSearch}\n          type=\"text\"\n          placeholder=\"type here...\"\n        />\n        <button type=\"submit\" className=\"btn-search\">\n          Search\n        </button>\n        <select\n          defaultValue=\"sort\"\n          onChange={props.handleSort}\n          className=\"custom-select\"\n        >\n          <option disabled value=\"sort\">\n            Sort Books\n          </option>\n          <option value=\"newest\">Newest</option>\n          <option value=\"oldest\">Oldest</option>\n        </select>\n      </form>\n    </div>\n  );\n};\n\nexport default SearchArea;\n","import React from \"react\";\n\nconst BookCard = props => {\n  return (\n    <div className=\"book\">\n      <div className=\"book__text\">\n        <h5 className=\"book__title\">{props.title}</h5>\n        <p className=\"book__author\">Author: {props.author}</p>\n        <p className=\"book__date\">\n          Published Date:{\" \"}\n          {props.published === \"0000\"\n            ? \"Not Available\"\n            : props.published.substring(0, 4)}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default BookCard;\n","import React from \"react\";\nimport BookCard from \"./BookCard\";\n\nconst BookList = props => {\n  return (\n    <div className=\"container\">\n      {props.books.map((book, i) => {\n        return (\n          <BookCard\n            key={i}\n            title={book.volumeInfo.title}\n            author={book.volumeInfo.authors}\n            published={book.volumeInfo.publishedDate}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default BookList;\n","import React, { Component } from \"react\";\nimport SearchArea from \"./SearchArea\";\nimport BookList from \"./BookList\";\nimport request from \"superagent\";\n\nclass Books extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      searchField: \"\",\n      sort: \"\"\n    };\n  }\n\n  searchBook = e => {\n    e.preventDefault();\n    request\n      .get(\"https://www.googleapis.com/books/v1/volumes\")\n      .query({ q: this.state.searchField })\n      .then(data => {\n        const cleanData = this.cleanData(data);\n        this.setState({ books: cleanData });\n      });\n  };\n\n  handleSearch = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  handleSort = event => {\n    this.setState({ sort: event.target.value });\n  };\n\n  cleanData = data => {\n    const cleanedData = data.body.items.map(book => {\n      if (book.volumeInfo.hasOwnProperty(\"publishedDate\") === false) {\n        book.volumeInfo[\"publishedDate\"] = \"0000\";\n      } else if (book.volumeInfo.hasOwnProperty(\"imageLinks\") === false) {\n        book.volumeInfo[\"imageLinks\"] = {\n          thumbnail:\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/1024px-No_image_available.svg.png\"\n        };\n      }\n      return book;\n    });\n    return cleanedData;\n  };\n\n  render() {\n    const sortedBooks = this.state.books.sort((a, b) => {\n      if (this.state.sort === \"newest\") {\n        return (\n          parseInt(b.volumeInfo.publishedDate.substring(0, 4)) -\n          parseInt(a.volumeInfo.publishedDate.substring(0, 4))\n        );\n      } else if (this.state.sort === \"oldest\") {\n        return (\n          parseInt(a.volumeInfo.publishedDate.substring(0, 4)) -\n          parseInt(b.volumeInfo.publishedDate.substring(0, 4))\n        );\n      }\n    });\n\n    return (\n      <div>\n        <SearchArea\n          searchBook={this.searchBook}\n          handleSearch={this.handleSearch}\n          handleSort={this.handleSort}\n        />\n        <BookList books={sortedBooks} />\n      </div>\n    );\n  }\n}\n\nexport default Books;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Books from \"./components/Books\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Books />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}